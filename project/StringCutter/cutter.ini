[Default]
ruleOrder=Format,Blank,Filter,Pass



[Format]	
textFormat=${key}	${value}	${encode}
describe=
	描述：该正则用于检查  语言文件表的基础格式：
	能够匹配：
	例子1： 'E	E/_1_=English	S/_1_=简体中文'
	例子2：'G	F/_16_=la touche # pour entrer espace	S/_16_=#键输入空格	35'
	无法比配:
	例子1： 'E	E/_1_=English	F/_1_=français' #对比字段应该是中文
	例子2： 'E	G/_1_=English	F/_1_=français' #待测目标语言 key值不匹配
pattern:
	^(?P<key>[A-Za-z])#匹配并获取待测目标语言的key值，只支持大小写字母
 	\t #以 \t 做分割字段 
 	(?P=key)     # 待测语言的key必须与所给 目标key值相同
 	/_(?P<num>\d+)_= # 匹配并获取待测目标语言语言的编号
 	(?P<value2>[^\t]*)         # 匹配基准字段值
 	\t #以 \t 做分割字段 	
 	(S|E)/_(?P=num)_=[^\t]+	#匹配基准字段
 	($|\t(?P<platform>[a-zA-z0-9]+$)) #获取不同平台字段
	
pass=true
 	
[Blank]
describe=
	描述：该正则用于检查  翻译字段中间是否带有连续空格：
	能够匹配：
	例子1： 'E/_1_=Eng  lish'
	例子2：'F/_16_=la tou	 che'	
pattern:
	(\s+) # 检查连续空格数据	
pass=false
	sub=\\\

[Filter]

describe=
	描述：该正则用于检查 是否 某个字段是否需要排除：
	能够匹配：
	例子1： 'E	#E/_1_=English	S/_1_=简体中文'
	例子2： 'E	E/_1_=English	#S/_1_=简体中文'
	例子3： 'E	E/_1_=English	S/_ 1_=简体中文' #基准字段格式检测错误，也会排除
	例子4：'G	F/_16_=la touche # pour entrer espace	S/_1k 6_=#键输入空格	35'
pattern: 
	^[A-Za-z]#匹配并获取待测目标语言的key值，只支持大小写字母
	\t #以 \t 做分割字段
	(\#|	 # 目标字段为注释字段，则需过滤
	[^\t]*\t # 匹配目标字段已经后面的\t
	(\#|(?!(S|E)/_\d+_=[^\t]+)))   #基准数据匹配失败或为注释字段，则过滤
pass=false

[Pass]
pattern:
	^


[Output]
describe:
	描述：该正则用于检查 是否 某个字段是否带有输出控制信息：
	
	
pattern:
	^\s*[^#](
	::\s*(P<encode>\w+)|
	@@{2}\s*(P<subPath>\w+)
	)